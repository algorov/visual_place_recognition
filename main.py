#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
from typing import List, Dict, Any

from app.video_processor import VideoProcessor
from app.position_filter import PositionFilter
from app.scene_loader import load_scene_metadata, load_scene_dataset
from app.vpr_system import VPRSystem
from app.config import CONFIG

# üîß –ó–∞—â–∏—Ç–∞ –æ—Ç OpenMP –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –º–µ–∂–¥—É FAISS –∏ PyTorch
os.environ["KMP_DUPLICATE_LIB_OK"] = "TRUE"
os.environ["OMP_NUM_THREADS"] = "1"


def load_entries() -> List[Dict[str, Any]]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏.

    :return: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ü–µ–Ω.
    """
    try:
        metadata = load_scene_metadata('data/scenes_metadata.csv')
        print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω: {len(metadata)}")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å—Ü–µ–Ω: {e}")
        metadata = {}

    entries = load_scene_dataset('data/scenes/', metadata)
    print(f"üñº –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(entries)}")
    return entries


def run_video_inference(entries: List[Dict[str, Any]]):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∫–∞–¥—Ä–∞–º.

    :param entries: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –±–∞–∑—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
    """
    print("\nüé• –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞:", CONFIG["test_video_path"])

    vpr = VPRSystem()
    vpr.build_index(entries)

    processor = VideoProcessor(CONFIG['test_video_path'], step=10)
    pos_filter = PositionFilter(window=5)

    for frame in processor.frames():
        result = vpr.search(frame)
        if result:
            print("\nüéØ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:")
            for key, value in result.items():
                if isinstance(value, float):
                    print(f"  {key}: {value:.6f}")
                else:
                    print(f"  {key}: {value}")


if __name__ == '__main__':
    entries = load_entries()
    if entries:
        run_video_inference(entries)
    else:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å:
    # test_single_image("vpr_data/kitty.jpg")
